package kr.or.ddit.basic;

public class T02_ThreadTest {
	
	public static void main(String[] args) {
		//멀티 스레드 프로그램 방식
		
		//방법1 : Thread 클래스를 상속한 class를 인스턴스를 생성한 후
		//		 이 인스턴스의 start() 메서드를 호출한다.
		//Thread 클래스가 있는데 우리는 그냥 이거 불러서 쓰면 된다.
		//나만의 클래스 정의하고 여기서 Thread 클래스 extends해서 써도 돼요.
		
		MyThread1 th1 = new MyThread1(); //스레드 객체 생성
		th1.start(); //실행 주체 : 메인 스레드
		
		//방법2 : Runnable 인터페이스를 구현한 class의 인스턴스를 생성한 후
		//		 이 인스턴스를 Thread객체의 인스턴스를 생성할 때 생성자의 매개변수로 넘겨준다.
		//		 이때 생성된 Thread객체의 인스턴스의 start()메서드를 호출한다.
		MyThread2 r1 = new MyThread2(); //작업 내용은 별개로 이렇게 제공하려는 것 - r1 매개변수
		Thread th2 = new Thread(r1);
		th2.start();
		//현재 3개의 스레드가 동작 : main스레드, r1, th2
		
		//방법3 : 익명클래스를 이용하는 방법
		//		 Runnable 인터페이스를 구현한 익명클래스를 Thread 인스턴스를
		//		 생성할 때 매개변수로 넘겨준다.
		Thread th3 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				@Override
				public void run() {
					for(int i=1; i<=200; i++) {
						System.out.print("$");
						try {
							Thread.sleep(100); //일시정지 상태
						}catch(InterruptedException ex){
							ex.printStackTrace();
						}
					}
					
				}
				
			}
		});
		
		
		
	}
}

class MyThread1 extends Thread {
	
	//Thread가 가지고 있는 메서드 중 가장 중요 : run()
	//앞으로 생성할 나만의 스레드들의 run()
	// = 메인 스레드의 main()
	@Override
	public void run() {
//		// TODO Auto-generated method stub
//		super.run();
		
		for(int i=1; i<=200; i++) {
			System.out.print("*");
			try {
				//너무 빨리 찍히니까 잠깐 멈춰주기
				//Thread.sleep(시간) => 주어진 시간 동안 작업을 잠시 멈춘다.
				//시간은 밀리세컨드 단위를 사용한다.
				//즉, 1000은 1초를 의미
				Thread.sleep(100); //일시정지 상태
			}catch(InterruptedException ex){
				ex.printStackTrace();
			}
		}
		
		
	}
}

class MyThread2 implements Runnable {

	@Override
	public void run() {
		for(int i=1; i<=200; i++) {
			System.out.print("$");
			try {
				Thread.sleep(100); //일시정지 상태
			}catch(InterruptedException ex){
				ex.printStackTrace();
			}
		}
		
	}
	
}