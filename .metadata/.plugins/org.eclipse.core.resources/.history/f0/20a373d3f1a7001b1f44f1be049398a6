package kr.or.ddit.basic;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class T09_MapTest {
/*
 * Map
 * - key값과 value값을 한 쌍으로 관리하는 객체
 * - key값은 중복을 허용하지 않고 순서가 없다.(Set의 특징)
 * - value값은 중복을 허용한다.(List의 특징)
 */
	
	public static void main(String[] args) {
		Map<String, String> map = new HashMap<>();
		
		//자료 추가 : put(key값, value값);
		map.put("name", "홍길동");
		map.put("addr", "대전");
		map.put("tel", "010-1234-5678");
		
		System.out.println("map : "+map);
		
		//자료 수정 : put(수정할 데이터의 key값, 새로운 value값) 
		//		     데이터 저장할 때 key값이 같으면 나중에 입력한 값이 저장된다.
		map.put("addr", "서울");
		System.out.println("map : " +map);
		
		//자료 삭제 : remove(삭제할 key값);
		map.remove("name");
		System.out.println("map : " + map);
		
		//자료 읽기 : get(key값);
		System.out.println("addr = " + map.get("addr"));
		System.out.println("=========================");
		
		/*
		 * key값들을 읽어와 자료를 출력하는 방법
		 * 
		 * 방법1. keySet() 메서드 이용
		 * - Map의 key값들만 읽어와 Set형으로 반환
		 * 
		 * 방법2. Set형의 데이터를 '향상된 for문'으로 처리
		 * - Iterator를 사용하지 않아도 된다. 
		 */
		
		//방법1.
		Set<String> keySet = map.keySet();
		
		System.out.println("Iterator를 이용한 방법");
		
		Iterator<String> it = keySet.iterator();
		while(it.hasNext()) {
			String key = it.next();
			System.out.println(key + " : " + map.get(key));
		}
		System.out.println("============================");
		
		//방법2.
		
	}
}
