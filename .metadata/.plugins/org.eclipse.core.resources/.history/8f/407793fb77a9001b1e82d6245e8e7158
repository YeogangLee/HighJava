package kr.or.ddit.basic;

import java.util.Arrays;

public class T06_WildcardTest {
	
	/**
	 * 모든 과정 수강정보 조회
	 * @param course 모든 과정
	 */
	public static void listCourseInfo(Course<?> course) {
		System.out.println(course.getName()
				+ "수강생: "
				+ Arrays.toString(course.getStudents()));
	}
	/**
	 * 학생 과정 수강정보 조회
	 * @param course 학생
	 */
	
	public static void listStudentCourseInfo(Course<? extends Student> course) {
//		System.out.println(course.getName());
		System.out.println(course.getName()
				+ "수강생: "
				+ Arrays.toString(course.getStudents()));
	}
	/**
	 * 직장인 과정 수강정보 조회
	 * @param course 직장인과 일반인
	 */
	public static void listWorkerCourseInfo(Course<? super Worker> course) {
		System.out.println(course.getName()
				+ "수강생: "
				+ Arrays.toString(course.getStudents()));
	}
	
	public static void main(String[] args) {
		
	}
}

class Person {
	String name; //이름
	public Person(String name) {
		this.name = name;
	}
	
	@Override
	public String toString() {
		return "이름" + name;
	}
}

class Worker extends Person {
	public Worker(String name) {
		super(name);
	}
}

class Student extends Person {
	public Student(String name) {
		super(name);
	}
}

class HighStudent extends Student {
	public HighStudent(String name) {
		super(name);
	}
}

/**
 * 수강과정
 * @author PC-14
 *
 * @param <T>
 */
class Course<T> {
	private String name;	//과정명
	private T[] students;	//수강생(제너릭 배열)
	
	public Course(String name, int capacity) {
		this.name = name;
		//타입 파라미터로 배열을 생성시 오브젝트 배열을 생성 후,
		//타입 파라미터 배열로 캐스팅 처리 해야 함.
		
		//제너릭 배열 생성 실패(new연산자는 생성할 객체의 타입이 정확히 정의되어야 가능)
//		students = new T[capacity]; //new는 T를 모른다, T 자료형을
		students = (T[])(new Object[capacity]);	//T타입 캐스팅(형변환)
	}

	public String getName() {
		return name;
	}

	public T[] getStudents() {
		return students;
	}
	
	/**
	 * 수강생 등록
	 * @param t
	 */
	public void add(T t) {
		for(int i = 0; i < students.length; i++) {
			if(students[i] == null) {//아직 등록되지 않은(빈) 자리인지 확인
				students[i] = t;
				break;
			}
		}
	}
}