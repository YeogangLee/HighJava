package kr.or.ddit.basic;

/**
 * @author PC-14
 * 제너릭 클래스를 만드는 방법
 * 형식)
 * 				 //<제너릭타입글자>에는 아무 문자가 올 수 있다 - 이 아무 문자는, 이후에 타입을 정하는 문자로서 쓰이게 된다.
 * 				 //근데 아무 문자보다는, 밑에 적힌 T,K,V,E 문자를 사용하면 의미 전달이 더 잘 되겠죠.
	 * class 클래스명<제너릭타입글자> { <-- <제너릭타입글자>에 선언한 문자는 {} 내부에서 하나의 타입처럼 사용할 수 있다.
	 * 		제너릭타입글자 변수명; //변수 선언에 제너릭을 사용할 경우
	 * 		...
	 * 		제너릭타입글자 메서드명() { // 반환값이 있는 메서드에서 사용
	 * 			return 값;
	 * 		}
	 * 		...
	 * }
 * 
 * -- 제너릭 타입 글자 --
 * T ==> Type
 * K ==> Key
 * V ==> Value
 * E ==> Element(자료구조에 들어가는 요소들을 나타낼 때 사용)
 */

class NonGenericClass {
	private Object val;

	public Object getVal() {
		return val;
	}

	public void setVal(Object val) {
		this.val = val;
	}
}

class MyGeneric<T> {
	private T val;

	public T getVal() {
		return val;
	}

	public void setVal(T val) {
		this.val = val;
	}
}


public class T02_GenericTest {
	public static void main(String[] args) {
		NonGenericClass ng1 = new NonGenericClass();
	}
}
